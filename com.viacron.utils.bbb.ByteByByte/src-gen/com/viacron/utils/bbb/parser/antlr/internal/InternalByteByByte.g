/*
* generated by Xtext
*/
grammar InternalByteByByte;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.viacron.utils.bbb.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.viacron.utils.bbb.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.viacron.utils.bbb.services.ByteByByteGrammarAccess;

}

@parser::members {

 	private ByteByByteGrammarAccess grammarAccess;
 	
    public InternalByteByByteParser(TokenStream input, ByteByByteGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ByteByByteGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGrammarNameGrammarNameParserRuleCall_0_0()); 
	    }
		lv_grammarName_0_0=ruleGrammarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"grammarName",
        		lv_grammarName_0_0, 
        		"GrammarName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackagePackageDeclarationParserRuleCall_1_0()); 
	    }
		lv_package_1_0=rulePackageDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_1_0, 
        		"PackageDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRootClassRootClassParserRuleCall_2_0()); 
	    }
		lv_rootClass_2_0=ruleRootClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"rootClass",
        		lv_rootClass_2_0, 
        		"RootClass");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDateTimeFormatDateTimeFormatParserRuleCall_3_0()); 
	    }
		lv_dateTimeFormat_3_0=ruleDateTimeFormat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"dateTimeFormat",
        		lv_dateTimeFormat_3_0, 
        		"DateTimeFormat");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMessagesMessageParserRuleCall_4_0()); 
	    }
		lv_messages_4_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"messages",
        		lv_messages_4_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSubTypesSubTypeParserRuleCall_5_0()); 
	    }
		lv_subTypes_5_0=ruleSubType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"subTypes",
        		lv_subTypes_5_0, 
        		"SubType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPenumsPEnumParserRuleCall_6_0()); 
	    }
		lv_penums_6_0=rulePEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"penums",
        		lv_penums_6_0, 
        		"PEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGrammarName
entryRuleGrammarName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGrammarNameRule()); }
	 iv_ruleGrammarName=ruleGrammarName 
	 { $current=$iv_ruleGrammarName.current; } 
	 EOF 
;

// Rule GrammarName
ruleGrammarName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='grammar name' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGrammarNameAccess().getGrammarNameKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGrammarNameAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGrammarNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRootClass
entryRuleRootClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootClassRule()); }
	 iv_ruleRootClass=ruleRootClass 
	 { $current=$iv_ruleRootClass.current; } 
	 EOF 
;

// Rule RootClass
ruleRootClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='root' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRootClassAccess().getRootKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRootClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRootClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDateTimeFormat
entryRuleDateTimeFormat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateTimeFormatRule()); }
	 iv_ruleDateTimeFormat=ruleDateTimeFormat 
	 { $current=$iv_ruleDateTimeFormat.current; } 
	 EOF 
;

// Rule DateTimeFormat
ruleDateTimeFormat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='date/time format:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDateTimeFormatAccess().getDateTimeFormatKeyword_0());
    }
(
(
		lv_dateTimeFormat_1_0=RULE_STRING
		{
			newLeafNode(lv_dateTimeFormat_1_0, grammarAccess.getDateTimeFormatAccess().getDateTimeFormatSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTimeFormatRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateTimeFormat",
        		lv_dateTimeFormat_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Message' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageAccess().getMessageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getAttributesAbstractAttributeParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAbstractAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"AbstractAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getEnumsPEnumRefParserRuleCall_4_0()); 
	    }
		lv_enums_4_0=rulePEnumRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		add(
       			$current, 
       			"enums",
        		lv_enums_4_0, 
        		"PEnumRef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAbstractAttribute
entryRuleAbstractAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractAttributeRule()); }
	 iv_ruleAbstractAttribute=ruleAbstractAttribute 
	 { $current=$iv_ruleAbstractAttribute.current; } 
	 EOF 
;

// Rule AbstractAttribute
ruleAbstractAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractAttributeAccess().getAttributeParserRuleCall_0()); 
    }
    this_Attribute_0=ruleAttribute
    { 
        $current = $this_Attribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractAttributeAccess().getSubTypeRefParserRuleCall_1()); 
    }
    this_SubTypeRef_1=ruleSubTypeRef
    { 
        $current = $this_SubTypeRef_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getListOfListOfParserRuleCall_2_0()); 
	    }
		lv_listOf_2_0=ruleListOf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"listOf",
        		lv_listOf_2_0, 
        		"ListOf");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getAttributeTypeAttributeTypeEnumRuleCall_3_0()); 
	    }
		lv_attributeType_3_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"attributeType",
        		lv_attributeType_3_0, 
        		"AttributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getOptionalOptionalParserRuleCall_4_0()); 
	    }
		lv_optional_4_0=ruleOptional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"optional",
        		lv_optional_4_0, 
        		"Optional");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleListOf
entryRuleListOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListOfRule()); }
	 iv_ruleListOf=ruleListOf 
	 { $current=$iv_ruleListOf.current; } 
	 EOF 
;

// Rule ListOf
ruleListOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_listOf_0_0=	'list' 
    {
        newLeafNode(lv_listOf_0_0, grammarAccess.getListOfAccess().getListOfListKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListOfRule());
	        }
       		setWithLastConsumed($current, "listOf", lv_listOf_0_0, "list");
	    }

)
)	otherlv_1='of' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListOfAccess().getOfKeyword_1());
    }
)
;





// Entry rule entryRuleOptional
entryRuleOptional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalRule()); }
	 iv_ruleOptional=ruleOptional 
	 { $current=$iv_ruleOptional.current; } 
	 EOF 
;

// Rule Optional
ruleOptional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_optional_0_0=	'(' 
    {
        newLeafNode(lv_optional_0_0, grammarAccess.getOptionalAccess().getOptionalLeftParenthesisKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalRule());
	        }
       		setWithLastConsumed($current, "optional", lv_optional_0_0, "(");
	    }

)
)	otherlv_1='optional' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionalAccess().getOptionalKeyword_1());
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionalAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleSubTypeRef
entryRuleSubTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubTypeRefRule()); }
	 iv_ruleSubTypeRef=ruleSubTypeRef 
	 { $current=$iv_ruleSubTypeRef.current; } 
	 EOF 
;

// Rule SubTypeRef
ruleSubTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSubTypeRefAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubTypeRefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubTypeRefAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubTypeRefAccess().getListOfListOfParserRuleCall_2_0()); 
	    }
		lv_listOf_2_0=ruleListOf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubTypeRefRule());
	        }
       		set(
       			$current, 
       			"listOf",
        		lv_listOf_2_0, 
        		"ListOf");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubTypeRefRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSubTypeRefAccess().getSubTypeSubTypeCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubTypeRefAccess().getOptionalOptionalParserRuleCall_4_0()); 
	    }
		lv_optional_4_0=ruleOptional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubTypeRefRule());
	        }
       		set(
       			$current, 
       			"optional",
        		lv_optional_4_0, 
        		"Optional");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePEnumRef
entryRulePEnumRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPEnumRefRule()); }
	 iv_rulePEnumRef=rulePEnumRef 
	 { $current=$iv_rulePEnumRef.current; } 
	 EOF 
;

// Rule PEnumRef
rulePEnumRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPEnumRefAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPEnumRefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPEnumRefAccess().getAsKeyword_1());
    }
	otherlv_2='enum' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPEnumRefAccess().getEnumKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPEnumRefRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPEnumRefAccess().getPenumPEnumCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPEnumRefAccess().getOptionalOptionalParserRuleCall_4_0()); 
	    }
		lv_optional_4_0=ruleOptional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPEnumRefRule());
	        }
       		set(
       			$current, 
       			"optional",
        		lv_optional_4_0, 
        		"Optional");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSubType
entryRuleSubType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubTypeRule()); }
	 iv_ruleSubType=ruleSubType 
	 { $current=$iv_ruleSubType.current; } 
	 EOF 
;

// Rule SubType
ruleSubType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SubType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubTypeAccess().getSubTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSubTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubTypeAccess().getAttributesAbstractAttributeParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAbstractAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubTypeRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"AbstractAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSubTypeAccess().getEnumsPEnumRefParserRuleCall_4_0()); 
	    }
		lv_enums_4_0=rulePEnumRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubTypeRule());
	        }
       		add(
       			$current, 
       			"enums",
        		lv_enums_4_0, 
        		"PEnumRef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSubTypeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulePEnum
entryRulePEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPEnumRule()); }
	 iv_rulePEnum=rulePEnum 
	 { $current=$iv_rulePEnum.current; } 
	 EOF 
;

// Rule PEnum
rulePEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPEnumAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPEnumAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPEnumRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPEnumAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPEnumAccess().getElementsPEnumElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=rulePEnumElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPEnumRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"PEnumElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPEnumAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulePEnumElement
entryRulePEnumElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPEnumElementRule()); }
	 iv_rulePEnumElement=rulePEnumElement 
	 { $current=$iv_rulePEnumElement.current; } 
	 EOF 
;

// Rule PEnumElement
rulePEnumElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPEnumElementAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPEnumElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule AttributeType
ruleAttributeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='string' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getSTRINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAttributeTypeAccess().getSTRINGEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='byte' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getBYTEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAttributeTypeAccess().getBYTEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='char' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getCHAREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAttributeTypeAccess().getCHAREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='integer' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAttributeTypeAccess().getINTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='float' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAttributeTypeAccess().getFLOATEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='double' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getDOUBLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAttributeTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='short' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getSHORTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAttributeTypeAccess().getSHORTEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='long' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getLONGEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAttributeTypeAccess().getLONGEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='calendar' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getCALENDAREnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAttributeTypeAccess().getCALENDAREnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='boolean' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getBOOLEANEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getAttributeTypeAccess().getBOOLEANEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='XREF' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getXREFEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getAttributeTypeAccess().getXREFEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='ID' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getIDEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getAttributeTypeAccess().getIDEnumLiteralDeclaration_11()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


