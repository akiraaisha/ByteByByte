/*
* generated by Xtext
*/

package com.viacron.utils.bbb.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ByteByByteGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGrammarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGrammarNameGrammarNameParserRuleCall_0_0 = (RuleCall)cGrammarNameAssignment_0.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagePackageDeclarationParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Assignment cRootClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootClassRootClassParserRuleCall_2_0 = (RuleCall)cRootClassAssignment_2.eContents().get(0);
		private final Assignment cDateTimeFormatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDateTimeFormatDateTimeFormatParserRuleCall_3_0 = (RuleCall)cDateTimeFormatAssignment_3.eContents().get(0);
		private final Assignment cMessagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMessagesMessageParserRuleCall_4_0 = (RuleCall)cMessagesAssignment_4.eContents().get(0);
		private final Assignment cSubTypesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubTypesSubTypeParserRuleCall_5_0 = (RuleCall)cSubTypesAssignment_5.eContents().get(0);
		private final Assignment cPenumsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPenumsPEnumParserRuleCall_6_0 = (RuleCall)cPenumsAssignment_6.eContents().get(0);
		
		//Model:
		//
		//	grammarName=GrammarName package=PackageDeclaration rootClass=RootClass dateTimeFormat=DateTimeFormat?
		//
		//	messages+=Message* subTypes+=SubType* penums+=PEnum*;
		public ParserRule getRule() { return rule; }

		//grammarName=GrammarName package=PackageDeclaration rootClass=RootClass dateTimeFormat=DateTimeFormat? messages+=Message*
		//
		//subTypes+=SubType* penums+=PEnum*
		public Group getGroup() { return cGroup; }

		//grammarName=GrammarName
		public Assignment getGrammarNameAssignment_0() { return cGrammarNameAssignment_0; }

		//GrammarName
		public RuleCall getGrammarNameGrammarNameParserRuleCall_0_0() { return cGrammarNameGrammarNameParserRuleCall_0_0; }

		//package=PackageDeclaration
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//PackageDeclaration
		public RuleCall getPackagePackageDeclarationParserRuleCall_1_0() { return cPackagePackageDeclarationParserRuleCall_1_0; }

		//rootClass=RootClass
		public Assignment getRootClassAssignment_2() { return cRootClassAssignment_2; }

		//RootClass
		public RuleCall getRootClassRootClassParserRuleCall_2_0() { return cRootClassRootClassParserRuleCall_2_0; }

		//dateTimeFormat=DateTimeFormat?
		public Assignment getDateTimeFormatAssignment_3() { return cDateTimeFormatAssignment_3; }

		//DateTimeFormat
		public RuleCall getDateTimeFormatDateTimeFormatParserRuleCall_3_0() { return cDateTimeFormatDateTimeFormatParserRuleCall_3_0; }

		//messages+=Message*
		public Assignment getMessagesAssignment_4() { return cMessagesAssignment_4; }

		//Message
		public RuleCall getMessagesMessageParserRuleCall_4_0() { return cMessagesMessageParserRuleCall_4_0; }

		//subTypes+=SubType*
		public Assignment getSubTypesAssignment_5() { return cSubTypesAssignment_5; }

		//SubType
		public RuleCall getSubTypesSubTypeParserRuleCall_5_0() { return cSubTypesSubTypeParserRuleCall_5_0; }

		//penums+=PEnum*
		public Assignment getPenumsAssignment_6() { return cPenumsAssignment_6; }

		//PEnum
		public RuleCall getPenumsPEnumParserRuleCall_6_0() { return cPenumsPEnumParserRuleCall_6_0; }
	}

	public class GrammarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GrammarName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrammarNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GrammarName:
		//
		//	"grammar name" name=ID;
		public ParserRule getRule() { return rule; }

		//"grammar name" name=ID
		public Group getGroup() { return cGroup; }

		//"grammar name"
		public Keyword getGrammarNameKeyword_0() { return cGrammarNameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageDeclaration:
		//
		//	"package" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class RootClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RootClass:
		//
		//	"root" name=ID;
		public ParserRule getRule() { return rule; }

		//"root" name=ID
		public Group getGroup() { return cGroup; }

		//"root"
		public Keyword getRootKeyword_0() { return cRootKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DateTimeFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimeFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateTimeFormatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateTimeFormatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateTimeFormatSTRINGTerminalRuleCall_1_0 = (RuleCall)cDateTimeFormatAssignment_1.eContents().get(0);
		
		//DateTimeFormat:
		//
		//	"date/time format:" dateTimeFormat=STRING;
		public ParserRule getRule() { return rule; }

		//"date/time format:" dateTimeFormat=STRING
		public Group getGroup() { return cGroup; }

		//"date/time format:"
		public Keyword getDateTimeFormatKeyword_0() { return cDateTimeFormatKeyword_0; }

		//dateTimeFormat=STRING
		public Assignment getDateTimeFormatAssignment_1() { return cDateTimeFormatAssignment_1; }

		//STRING
		public RuleCall getDateTimeFormatSTRINGTerminalRuleCall_1_0() { return cDateTimeFormatSTRINGTerminalRuleCall_1_0; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAbstractAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cEnumsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumsPEnumRefParserRuleCall_4_0 = (RuleCall)cEnumsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Message:
		//
		//	"Message" name=ID "{" attributes+=AbstractAttribute* enums+=PEnumRef* "}";
		public ParserRule getRule() { return rule; }

		//"Message" name=ID "{" attributes+=AbstractAttribute* enums+=PEnumRef* "}"
		public Group getGroup() { return cGroup; }

		//"Message"
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=AbstractAttribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//AbstractAttribute
		public RuleCall getAttributesAbstractAttributeParserRuleCall_3_0() { return cAttributesAbstractAttributeParserRuleCall_3_0; }

		//enums+=PEnumRef*
		public Assignment getEnumsAssignment_4() { return cEnumsAssignment_4; }

		//PEnumRef
		public RuleCall getEnumsPEnumRefParserRuleCall_4_0() { return cEnumsPEnumRefParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AbstractAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractAttribute:
		//
		//	Attribute | SubTypeRef;
		public ParserRule getRule() { return rule; }

		//Attribute | SubTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//SubTypeRef
		public RuleCall getSubTypeRefParserRuleCall_1() { return cSubTypeRefParserRuleCall_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListOfListOfParserRuleCall_2_0 = (RuleCall)cListOfAssignment_2.eContents().get(0);
		private final Assignment cAttributeTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeTypeAttributeTypeEnumRuleCall_3_0 = (RuleCall)cAttributeTypeAssignment_3.eContents().get(0);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionalOptionalParserRuleCall_4_0 = (RuleCall)cOptionalAssignment_4.eContents().get(0);
		
		//Attribute:
		//
		//	name=ID "as" listOf=ListOf? attributeType=AttributeType optional=Optional?;
		public ParserRule getRule() { return rule; }

		//name=ID "as" listOf=ListOf? attributeType=AttributeType optional=Optional?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//listOf=ListOf?
		public Assignment getListOfAssignment_2() { return cListOfAssignment_2; }

		//ListOf
		public RuleCall getListOfListOfParserRuleCall_2_0() { return cListOfListOfParserRuleCall_2_0; }

		//attributeType=AttributeType
		public Assignment getAttributeTypeAssignment_3() { return cAttributeTypeAssignment_3; }

		//AttributeType
		public RuleCall getAttributeTypeAttributeTypeEnumRuleCall_3_0() { return cAttributeTypeAttributeTypeEnumRuleCall_3_0; }

		//optional=Optional?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }

		//Optional
		public RuleCall getOptionalOptionalParserRuleCall_4_0() { return cOptionalOptionalParserRuleCall_4_0; }
	}

	public class ListOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListOfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cListOfListKeyword_0_0 = (Keyword)cListOfAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ListOf returns ListOF:
		//
		//	listOf="list" "of";
		public ParserRule getRule() { return rule; }

		//listOf="list" "of"
		public Group getGroup() { return cGroup; }

		//listOf="list"
		public Assignment getListOfAssignment_0() { return cListOfAssignment_0; }

		//"list"
		public Keyword getListOfListKeyword_0_0() { return cListOfListKeyword_0_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
	}

	public class OptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalLeftParenthesisKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Keyword cOptionalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Optional:
		//
		//	optional="(" "optional" ")";
		public ParserRule getRule() { return rule; }

		//optional="(" "optional" ")"
		public Group getGroup() { return cGroup; }

		//optional="("
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"("
		public Keyword getOptionalLeftParenthesisKeyword_0_0() { return cOptionalLeftParenthesisKeyword_0_0; }

		//"optional"
		public Keyword getOptionalKeyword_1() { return cOptionalKeyword_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class SubTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListOfListOfParserRuleCall_2_0 = (RuleCall)cListOfAssignment_2.eContents().get(0);
		private final Assignment cSubTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSubTypeSubTypeCrossReference_3_0 = (CrossReference)cSubTypeAssignment_3.eContents().get(0);
		private final RuleCall cSubTypeSubTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSubTypeSubTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionalOptionalParserRuleCall_4_0 = (RuleCall)cOptionalAssignment_4.eContents().get(0);
		
		//SubTypeRef:
		//
		//	name=ID "as" listOf=ListOf? subType=[SubType] optional=Optional?;
		public ParserRule getRule() { return rule; }

		//name=ID "as" listOf=ListOf? subType=[SubType] optional=Optional?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//listOf=ListOf?
		public Assignment getListOfAssignment_2() { return cListOfAssignment_2; }

		//ListOf
		public RuleCall getListOfListOfParserRuleCall_2_0() { return cListOfListOfParserRuleCall_2_0; }

		//subType=[SubType]
		public Assignment getSubTypeAssignment_3() { return cSubTypeAssignment_3; }

		//[SubType]
		public CrossReference getSubTypeSubTypeCrossReference_3_0() { return cSubTypeSubTypeCrossReference_3_0; }

		//ID
		public RuleCall getSubTypeSubTypeIDTerminalRuleCall_3_0_1() { return cSubTypeSubTypeIDTerminalRuleCall_3_0_1; }

		//optional=Optional?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }

		//Optional
		public RuleCall getOptionalOptionalParserRuleCall_4_0() { return cOptionalOptionalParserRuleCall_4_0; }
	}

	public class PEnumRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PEnumRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEnumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPenumAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPenumPEnumCrossReference_3_0 = (CrossReference)cPenumAssignment_3.eContents().get(0);
		private final RuleCall cPenumPEnumIDTerminalRuleCall_3_0_1 = (RuleCall)cPenumPEnumCrossReference_3_0.eContents().get(1);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionalOptionalParserRuleCall_4_0 = (RuleCall)cOptionalAssignment_4.eContents().get(0);
		
		//PEnumRef:
		//
		//	name=ID "as" "enum" penum=[PEnum] optional=Optional?;
		public ParserRule getRule() { return rule; }

		//name=ID "as" "enum" penum=[PEnum] optional=Optional?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//"enum"
		public Keyword getEnumKeyword_2() { return cEnumKeyword_2; }

		//penum=[PEnum]
		public Assignment getPenumAssignment_3() { return cPenumAssignment_3; }

		//[PEnum]
		public CrossReference getPenumPEnumCrossReference_3_0() { return cPenumPEnumCrossReference_3_0; }

		//ID
		public RuleCall getPenumPEnumIDTerminalRuleCall_3_0_1() { return cPenumPEnumIDTerminalRuleCall_3_0_1; }

		//optional=Optional?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }

		//Optional
		public RuleCall getOptionalOptionalParserRuleCall_4_0() { return cOptionalOptionalParserRuleCall_4_0; }
	}

	public class SubTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAbstractAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cEnumsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumsPEnumRefParserRuleCall_4_0 = (RuleCall)cEnumsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SubType:
		//
		//	"SubType" name=ID "{" attributes+=AbstractAttribute* enums+=PEnumRef* "}";
		public ParserRule getRule() { return rule; }

		//"SubType" name=ID "{" attributes+=AbstractAttribute* enums+=PEnumRef* "}"
		public Group getGroup() { return cGroup; }

		//"SubType"
		public Keyword getSubTypeKeyword_0() { return cSubTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=AbstractAttribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//AbstractAttribute
		public RuleCall getAttributesAbstractAttributeParserRuleCall_3_0() { return cAttributesAbstractAttributeParserRuleCall_3_0; }

		//enums+=PEnumRef*
		public Assignment getEnumsAssignment_4() { return cEnumsAssignment_4; }

		//PEnumRef
		public RuleCall getEnumsPEnumRefParserRuleCall_4_0() { return cEnumsPEnumRefParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPEnumElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PEnum:
		//
		//	"Enum" name=ID "{" elements+=PEnumElement* "}";
		public ParserRule getRule() { return rule; }

		//"Enum" name=ID "{" elements+=PEnumElement* "}"
		public Group getGroup() { return cGroup; }

		//"Enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=PEnumElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//PEnumElement
		public RuleCall getElementsPEnumElementParserRuleCall_3_0() { return cElementsPEnumElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PEnumElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PEnumElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PEnumElement:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBYTEByteKeyword_1_0 = (Keyword)cBYTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHARCharKeyword_2_0 = (Keyword)cCHAREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTIntegerKeyword_3_0 = (Keyword)cINTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDOUBLEDoubleKeyword_5_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSHORTShortKeyword_6_0 = (Keyword)cSHORTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLONGLongKeyword_7_0 = (Keyword)cLONGEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCALENDAREnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCALENDARCalendarKeyword_8_0 = (Keyword)cCALENDAREnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBOOLEANBooleanKeyword_9_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cXREFEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cXREFXREFKeyword_10_0 = (Keyword)cXREFEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cIDEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cIDIDKeyword_11_0 = (Keyword)cIDEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum AttributeType:
		//
		//	STRING="string" | BYTE="byte" | CHAR="char" | INT="integer" | FLOAT="float" | DOUBLE="double" | SHORT="short" |
		//
		//	LONG="long" | CALENDAR="calendar" | BOOLEAN="boolean" | XREF | ID;
		public EnumRule getRule() { return rule; }

		//STRING="string" | BYTE="byte" | CHAR="char" | INT="integer" | FLOAT="float" | DOUBLE="double" | SHORT="short" |
		//
		//LONG="long" | CALENDAR="calendar" | BOOLEAN="boolean" | XREF | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }

		//"string"
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }

		//BYTE="byte"
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_1() { return cBYTEEnumLiteralDeclaration_1; }

		//"byte"
		public Keyword getBYTEByteKeyword_1_0() { return cBYTEByteKeyword_1_0; }

		//CHAR="char"
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_2() { return cCHAREnumLiteralDeclaration_2; }

		//"char"
		public Keyword getCHARCharKeyword_2_0() { return cCHARCharKeyword_2_0; }

		//INT="integer"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_3() { return cINTEnumLiteralDeclaration_3; }

		//"integer"
		public Keyword getINTIntegerKeyword_3_0() { return cINTIntegerKeyword_3_0; }

		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }

		//"float"
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }

		//DOUBLE="double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_5() { return cDOUBLEEnumLiteralDeclaration_5; }

		//"double"
		public Keyword getDOUBLEDoubleKeyword_5_0() { return cDOUBLEDoubleKeyword_5_0; }

		//SHORT="short"
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_6() { return cSHORTEnumLiteralDeclaration_6; }

		//"short"
		public Keyword getSHORTShortKeyword_6_0() { return cSHORTShortKeyword_6_0; }

		//LONG="long"
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_7() { return cLONGEnumLiteralDeclaration_7; }

		//"long"
		public Keyword getLONGLongKeyword_7_0() { return cLONGLongKeyword_7_0; }

		//CALENDAR="calendar"
		public EnumLiteralDeclaration getCALENDAREnumLiteralDeclaration_8() { return cCALENDAREnumLiteralDeclaration_8; }

		//"calendar"
		public Keyword getCALENDARCalendarKeyword_8_0() { return cCALENDARCalendarKeyword_8_0; }

		//BOOLEAN="boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_9() { return cBOOLEANEnumLiteralDeclaration_9; }

		//"boolean"
		public Keyword getBOOLEANBooleanKeyword_9_0() { return cBOOLEANBooleanKeyword_9_0; }

		//XREF
		public EnumLiteralDeclaration getXREFEnumLiteralDeclaration_10() { return cXREFEnumLiteralDeclaration_10; }

		//"XREF"
		public Keyword getXREFXREFKeyword_10_0() { return cXREFXREFKeyword_10_0; }

		//ID
		public EnumLiteralDeclaration getIDEnumLiteralDeclaration_11() { return cIDEnumLiteralDeclaration_11; }

		//"ID"
		public Keyword getIDIDKeyword_11_0() { return cIDIDKeyword_11_0; }
	}
	
	private ModelElements pModel;
	private GrammarNameElements pGrammarName;
	private PackageDeclarationElements pPackageDeclaration;
	private RootClassElements pRootClass;
	private DateTimeFormatElements pDateTimeFormat;
	private MessageElements pMessage;
	private AbstractAttributeElements pAbstractAttribute;
	private AttributeElements pAttribute;
	private AttributeTypeElements unknownRuleAttributeType;
	private ListOfElements pListOf;
	private OptionalElements pOptional;
	private SubTypeRefElements pSubTypeRef;
	private PEnumRefElements pPEnumRef;
	private SubTypeElements pSubType;
	private PEnumElements pPEnum;
	private PEnumElementElements pPEnumElement;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ByteByByteGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.viacron.utils.bbb.ByteByByte".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	grammarName=GrammarName package=PackageDeclaration rootClass=RootClass dateTimeFormat=DateTimeFormat?
	//
	//	messages+=Message* subTypes+=SubType* penums+=PEnum*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//GrammarName:
	//
	//	"grammar name" name=ID;
	public GrammarNameElements getGrammarNameAccess() {
		return (pGrammarName != null) ? pGrammarName : (pGrammarName = new GrammarNameElements());
	}
	
	public ParserRule getGrammarNameRule() {
		return getGrammarNameAccess().getRule();
	}

	//PackageDeclaration:
	//
	//	"package" name=QualifiedName;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//RootClass:
	//
	//	"root" name=ID;
	public RootClassElements getRootClassAccess() {
		return (pRootClass != null) ? pRootClass : (pRootClass = new RootClassElements());
	}
	
	public ParserRule getRootClassRule() {
		return getRootClassAccess().getRule();
	}

	//DateTimeFormat:
	//
	//	"date/time format:" dateTimeFormat=STRING;
	public DateTimeFormatElements getDateTimeFormatAccess() {
		return (pDateTimeFormat != null) ? pDateTimeFormat : (pDateTimeFormat = new DateTimeFormatElements());
	}
	
	public ParserRule getDateTimeFormatRule() {
		return getDateTimeFormatAccess().getRule();
	}

	//Message:
	//
	//	"Message" name=ID "{" attributes+=AbstractAttribute* enums+=PEnumRef* "}";
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//AbstractAttribute:
	//
	//	Attribute | SubTypeRef;
	public AbstractAttributeElements getAbstractAttributeAccess() {
		return (pAbstractAttribute != null) ? pAbstractAttribute : (pAbstractAttribute = new AbstractAttributeElements());
	}
	
	public ParserRule getAbstractAttributeRule() {
		return getAbstractAttributeAccess().getRule();
	}

	//Attribute:
	//
	//	name=ID "as" listOf=ListOf? attributeType=AttributeType optional=Optional?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//enum AttributeType:
	//
	//	STRING="string" | BYTE="byte" | CHAR="char" | INT="integer" | FLOAT="float" | DOUBLE="double" | SHORT="short" |
	//
	//	LONG="long" | CALENDAR="calendar" | BOOLEAN="boolean" | XREF | ID;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//ListOf returns ListOF:
	//
	//	listOf="list" "of";
	public ListOfElements getListOfAccess() {
		return (pListOf != null) ? pListOf : (pListOf = new ListOfElements());
	}
	
	public ParserRule getListOfRule() {
		return getListOfAccess().getRule();
	}

	//Optional:
	//
	//	optional="(" "optional" ")";
	public OptionalElements getOptionalAccess() {
		return (pOptional != null) ? pOptional : (pOptional = new OptionalElements());
	}
	
	public ParserRule getOptionalRule() {
		return getOptionalAccess().getRule();
	}

	//SubTypeRef:
	//
	//	name=ID "as" listOf=ListOf? subType=[SubType] optional=Optional?;
	public SubTypeRefElements getSubTypeRefAccess() {
		return (pSubTypeRef != null) ? pSubTypeRef : (pSubTypeRef = new SubTypeRefElements());
	}
	
	public ParserRule getSubTypeRefRule() {
		return getSubTypeRefAccess().getRule();
	}

	//PEnumRef:
	//
	//	name=ID "as" "enum" penum=[PEnum] optional=Optional?;
	public PEnumRefElements getPEnumRefAccess() {
		return (pPEnumRef != null) ? pPEnumRef : (pPEnumRef = new PEnumRefElements());
	}
	
	public ParserRule getPEnumRefRule() {
		return getPEnumRefAccess().getRule();
	}

	//SubType:
	//
	//	"SubType" name=ID "{" attributes+=AbstractAttribute* enums+=PEnumRef* "}";
	public SubTypeElements getSubTypeAccess() {
		return (pSubType != null) ? pSubType : (pSubType = new SubTypeElements());
	}
	
	public ParserRule getSubTypeRule() {
		return getSubTypeAccess().getRule();
	}

	//PEnum:
	//
	//	"Enum" name=ID "{" elements+=PEnumElement* "}";
	public PEnumElements getPEnumAccess() {
		return (pPEnum != null) ? pPEnum : (pPEnum = new PEnumElements());
	}
	
	public ParserRule getPEnumRule() {
		return getPEnumAccess().getRule();
	}

	//PEnumElement:
	//
	//	name=ID;
	public PEnumElementElements getPEnumElementAccess() {
		return (pPEnumElement != null) ? pPEnumElement : (pPEnumElement = new PEnumElementElements());
	}
	
	public ParserRule getPEnumElementRule() {
		return getPEnumElementAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
