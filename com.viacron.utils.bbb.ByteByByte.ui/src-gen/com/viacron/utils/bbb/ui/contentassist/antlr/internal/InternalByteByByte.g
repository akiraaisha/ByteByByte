/*
* generated by Xtext
*/
grammar InternalByteByByte;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.viacron.utils.bbb.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.viacron.utils.bbb.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.viacron.utils.bbb.services.ByteByByteGrammarAccess;

}

@parser::members {
 
 	private ByteByByteGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ByteByByteGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGrammarName
entryRuleGrammarName 
:
{ before(grammarAccess.getGrammarNameRule()); }
	 ruleGrammarName
{ after(grammarAccess.getGrammarNameRule()); } 
	 EOF 
;

// Rule GrammarName
ruleGrammarName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGrammarNameAccess().getGroup()); }
(rule__GrammarName__Group__0)
{ after(grammarAccess.getGrammarNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration 
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
(rule__PackageDeclaration__Group__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRootClass
entryRuleRootClass 
:
{ before(grammarAccess.getRootClassRule()); }
	 ruleRootClass
{ after(grammarAccess.getRootClassRule()); } 
	 EOF 
;

// Rule RootClass
ruleRootClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootClassAccess().getGroup()); }
(rule__RootClass__Group__0)
{ after(grammarAccess.getRootClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateTimeFormat
entryRuleDateTimeFormat 
:
{ before(grammarAccess.getDateTimeFormatRule()); }
	 ruleDateTimeFormat
{ after(grammarAccess.getDateTimeFormatRule()); } 
	 EOF 
;

// Rule DateTimeFormat
ruleDateTimeFormat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateTimeFormatAccess().getGroup()); }
(rule__DateTimeFormat__Group__0)
{ after(grammarAccess.getDateTimeFormatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMessage
entryRuleMessage 
:
{ before(grammarAccess.getMessageRule()); }
	 ruleMessage
{ after(grammarAccess.getMessageRule()); } 
	 EOF 
;

// Rule Message
ruleMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMessageAccess().getGroup()); }
(rule__Message__Group__0)
{ after(grammarAccess.getMessageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractAttribute
entryRuleAbstractAttribute 
:
{ before(grammarAccess.getAbstractAttributeRule()); }
	 ruleAbstractAttribute
{ after(grammarAccess.getAbstractAttributeRule()); } 
	 EOF 
;

// Rule AbstractAttribute
ruleAbstractAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractAttributeAccess().getAlternatives()); }
(rule__AbstractAttribute__Alternatives)
{ after(grammarAccess.getAbstractAttributeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListOf
entryRuleListOf 
:
{ before(grammarAccess.getListOfRule()); }
	 ruleListOf
{ after(grammarAccess.getListOfRule()); } 
	 EOF 
;

// Rule ListOf
ruleListOf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListOfAccess().getGroup()); }
(rule__ListOf__Group__0)
{ after(grammarAccess.getListOfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptional
entryRuleOptional 
:
{ before(grammarAccess.getOptionalRule()); }
	 ruleOptional
{ after(grammarAccess.getOptionalRule()); } 
	 EOF 
;

// Rule Optional
ruleOptional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionalAccess().getGroup()); }
(rule__Optional__Group__0)
{ after(grammarAccess.getOptionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubTypeRef
entryRuleSubTypeRef 
:
{ before(grammarAccess.getSubTypeRefRule()); }
	 ruleSubTypeRef
{ after(grammarAccess.getSubTypeRefRule()); } 
	 EOF 
;

// Rule SubTypeRef
ruleSubTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubTypeRefAccess().getGroup()); }
(rule__SubTypeRef__Group__0)
{ after(grammarAccess.getSubTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePEnumRef
entryRulePEnumRef 
:
{ before(grammarAccess.getPEnumRefRule()); }
	 rulePEnumRef
{ after(grammarAccess.getPEnumRefRule()); } 
	 EOF 
;

// Rule PEnumRef
rulePEnumRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPEnumRefAccess().getGroup()); }
(rule__PEnumRef__Group__0)
{ after(grammarAccess.getPEnumRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubType
entryRuleSubType 
:
{ before(grammarAccess.getSubTypeRule()); }
	 ruleSubType
{ after(grammarAccess.getSubTypeRule()); } 
	 EOF 
;

// Rule SubType
ruleSubType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubTypeAccess().getGroup()); }
(rule__SubType__Group__0)
{ after(grammarAccess.getSubTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePEnum
entryRulePEnum 
:
{ before(grammarAccess.getPEnumRule()); }
	 rulePEnum
{ after(grammarAccess.getPEnumRule()); } 
	 EOF 
;

// Rule PEnum
rulePEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPEnumAccess().getGroup()); }
(rule__PEnum__Group__0)
{ after(grammarAccess.getPEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePEnumElement
entryRulePEnumElement 
:
{ before(grammarAccess.getPEnumElementRule()); }
	 rulePEnumElement
{ after(grammarAccess.getPEnumElementRule()); } 
	 EOF 
;

// Rule PEnumElement
rulePEnumElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPEnumElementAccess().getNameAssignment()); }
(rule__PEnumElement__NameAssignment)
{ after(grammarAccess.getPEnumElementAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule AttributeType
ruleAttributeType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
(rule__AttributeType__Alternatives)
{ after(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AbstractAttribute__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractAttributeAccess().getAttributeParserRuleCall_0()); }
	ruleAttribute
{ after(grammarAccess.getAbstractAttributeAccess().getAttributeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractAttributeAccess().getSubTypeRefParserRuleCall_1()); }
	ruleSubTypeRef
{ after(grammarAccess.getAbstractAttributeAccess().getSubTypeRefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTypeAccess().getSTRINGEnumLiteralDeclaration_0()); }
(	'string' 
)
{ after(grammarAccess.getAttributeTypeAccess().getSTRINGEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getBYTEEnumLiteralDeclaration_1()); }
(	'byte' 
)
{ after(grammarAccess.getAttributeTypeAccess().getBYTEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getCHAREnumLiteralDeclaration_2()); }
(	'char' 
)
{ after(grammarAccess.getAttributeTypeAccess().getCHAREnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getINTEnumLiteralDeclaration_3()); }
(	'integer' 
)
{ after(grammarAccess.getAttributeTypeAccess().getINTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
(	'float' 
)
{ after(grammarAccess.getAttributeTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); }
(	'double' 
)
{ after(grammarAccess.getAttributeTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getSHORTEnumLiteralDeclaration_6()); }
(	'short' 
)
{ after(grammarAccess.getAttributeTypeAccess().getSHORTEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getLONGEnumLiteralDeclaration_7()); }
(	'long' 
)
{ after(grammarAccess.getAttributeTypeAccess().getLONGEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getCALENDAREnumLiteralDeclaration_8()); }
(	'calendar' 
)
{ after(grammarAccess.getAttributeTypeAccess().getCALENDAREnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getBOOLEANEnumLiteralDeclaration_9()); }
(	'boolean' 
)
{ after(grammarAccess.getAttributeTypeAccess().getBOOLEANEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getXREFEnumLiteralDeclaration_10()); }
(	'XREF' 
)
{ after(grammarAccess.getAttributeTypeAccess().getXREFEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getIDEnumLiteralDeclaration_11()); }
(	'ID' 
)
{ after(grammarAccess.getAttributeTypeAccess().getIDEnumLiteralDeclaration_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGrammarNameAssignment_0()); }
(rule__Model__GrammarNameAssignment_0)
{ after(grammarAccess.getModelAccess().getGrammarNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackageAssignment_1()); }
(rule__Model__PackageAssignment_1)
{ after(grammarAccess.getModelAccess().getPackageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRootClassAssignment_2()); }
(rule__Model__RootClassAssignment_2)
{ after(grammarAccess.getModelAccess().getRootClassAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDateTimeFormatAssignment_3()); }
(rule__Model__DateTimeFormatAssignment_3)?
{ after(grammarAccess.getModelAccess().getDateTimeFormatAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMessagesAssignment_4()); }
(rule__Model__MessagesAssignment_4)*
{ after(grammarAccess.getModelAccess().getMessagesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__5__Impl
	rule__Model__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubTypesAssignment_5()); }
(rule__Model__SubTypesAssignment_5)*
{ after(grammarAccess.getModelAccess().getSubTypesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPenumsAssignment_6()); }
(rule__Model__PenumsAssignment_6)*
{ after(grammarAccess.getModelAccess().getPenumsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__GrammarName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrammarName__Group__0__Impl
	rule__GrammarName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarNameAccess().getGrammarNameKeyword_0()); }

	'grammar name' 

{ after(grammarAccess.getGrammarNameAccess().getGrammarNameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GrammarName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrammarName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarNameAccess().getNameAssignment_1()); }
(rule__GrammarName__NameAssignment_1)
{ after(grammarAccess.getGrammarNameAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackageDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
(rule__PackageDeclaration__NameAssignment_1)
{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RootClass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootClass__Group__0__Impl
	rule__RootClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootClass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootClassAccess().getRootKeyword_0()); }

	'root' 

{ after(grammarAccess.getRootClassAccess().getRootKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootClass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootClass__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootClass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootClassAccess().getNameAssignment_1()); }
(rule__RootClass__NameAssignment_1)
{ after(grammarAccess.getRootClassAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateTimeFormat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeFormat__Group__0__Impl
	rule__DateTimeFormat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeFormat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeFormatAccess().getDateTimeFormatKeyword_0()); }

	'date/time format:' 

{ after(grammarAccess.getDateTimeFormatAccess().getDateTimeFormatKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateTimeFormat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateTimeFormat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeFormat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeFormatAccess().getDateTimeFormatAssignment_1()); }
(rule__DateTimeFormat__DateTimeFormatAssignment_1)
{ after(grammarAccess.getDateTimeFormatAccess().getDateTimeFormatAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Message__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Message__Group__0__Impl
	rule__Message__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Message__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getMessageKeyword_0()); }

	'Message' 

{ after(grammarAccess.getMessageAccess().getMessageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Message__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Message__Group__1__Impl
	rule__Message__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Message__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getNameAssignment_1()); }
(rule__Message__NameAssignment_1)
{ after(grammarAccess.getMessageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Message__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Message__Group__2__Impl
	rule__Message__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Message__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Message__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Message__Group__3__Impl
	rule__Message__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Message__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getAttributesAssignment_3()); }
(rule__Message__AttributesAssignment_3)*
{ after(grammarAccess.getMessageAccess().getAttributesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Message__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Message__Group__4__Impl
	rule__Message__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Message__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getEnumsAssignment_4()); }
(rule__Message__EnumsAssignment_4)*
{ after(grammarAccess.getMessageAccess().getEnumsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Message__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Message__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Message__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
(rule__Attribute__NameAssignment_0)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAsKeyword_1()); }

	'as' 

{ after(grammarAccess.getAttributeAccess().getAsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getListOfAssignment_2()); }
(rule__Attribute__ListOfAssignment_2)?
{ after(grammarAccess.getAttributeAccess().getListOfAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__3__Impl
	rule__Attribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttributeTypeAssignment_3()); }
(rule__Attribute__AttributeTypeAssignment_3)
{ after(grammarAccess.getAttributeAccess().getAttributeTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getOptionalAssignment_4()); }
(rule__Attribute__OptionalAssignment_4)?
{ after(grammarAccess.getAttributeAccess().getOptionalAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ListOf__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListOf__Group__0__Impl
	rule__ListOf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOf__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListOfAccess().getListOfAssignment_0()); }
(rule__ListOf__ListOfAssignment_0)
{ after(grammarAccess.getListOfAccess().getListOfAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListOf__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListOf__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOf__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListOfAccess().getOfKeyword_1()); }

	'of' 

{ after(grammarAccess.getListOfAccess().getOfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Optional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__0__Impl
	rule__Optional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getOptionalAssignment_0()); }
(rule__Optional__OptionalAssignment_0)
{ after(grammarAccess.getOptionalAccess().getOptionalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__1__Impl
	rule__Optional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getOptionalKeyword_1()); }

	'optional' 

{ after(grammarAccess.getOptionalAccess().getOptionalKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getOptionalAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeRef__Group__0__Impl
	rule__SubTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getNameAssignment_0()); }
(rule__SubTypeRef__NameAssignment_0)
{ after(grammarAccess.getSubTypeRefAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeRef__Group__1__Impl
	rule__SubTypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getAsKeyword_1()); }

	'as' 

{ after(grammarAccess.getSubTypeRefAccess().getAsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeRef__Group__2__Impl
	rule__SubTypeRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getListOfAssignment_2()); }
(rule__SubTypeRef__ListOfAssignment_2)?
{ after(grammarAccess.getSubTypeRefAccess().getListOfAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeRef__Group__3__Impl
	rule__SubTypeRef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getSubTypeAssignment_3()); }
(rule__SubTypeRef__SubTypeAssignment_3)
{ after(grammarAccess.getSubTypeRefAccess().getSubTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeRef__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeRef__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getOptionalAssignment_4()); }
(rule__SubTypeRef__OptionalAssignment_4)?
{ after(grammarAccess.getSubTypeRefAccess().getOptionalAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PEnumRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnumRef__Group__0__Impl
	rule__PEnumRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getNameAssignment_0()); }
(rule__PEnumRef__NameAssignment_0)
{ after(grammarAccess.getPEnumRefAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnumRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnumRef__Group__1__Impl
	rule__PEnumRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getAsKeyword_1()); }

	'as' 

{ after(grammarAccess.getPEnumRefAccess().getAsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnumRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnumRef__Group__2__Impl
	rule__PEnumRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getEnumKeyword_2()); }

	'enum' 

{ after(grammarAccess.getPEnumRefAccess().getEnumKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnumRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnumRef__Group__3__Impl
	rule__PEnumRef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getPenumAssignment_3()); }
(rule__PEnumRef__PenumAssignment_3)
{ after(grammarAccess.getPEnumRefAccess().getPenumAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnumRef__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnumRef__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getOptionalAssignment_4()); }
(rule__PEnumRef__OptionalAssignment_4)?
{ after(grammarAccess.getPEnumRefAccess().getOptionalAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SubType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubType__Group__0__Impl
	rule__SubType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getSubTypeKeyword_0()); }

	'SubType' 

{ after(grammarAccess.getSubTypeAccess().getSubTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubType__Group__1__Impl
	rule__SubType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getNameAssignment_1()); }
(rule__SubType__NameAssignment_1)
{ after(grammarAccess.getSubTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubType__Group__2__Impl
	rule__SubType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSubTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubType__Group__3__Impl
	rule__SubType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getAttributesAssignment_3()); }
(rule__SubType__AttributesAssignment_3)*
{ after(grammarAccess.getSubTypeAccess().getAttributesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubType__Group__4__Impl
	rule__SubType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getEnumsAssignment_4()); }
(rule__SubType__EnumsAssignment_4)*
{ after(grammarAccess.getSubTypeAccess().getEnumsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSubTypeAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__PEnum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnum__Group__0__Impl
	rule__PEnum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumAccess().getEnumKeyword_0()); }

	'Enum' 

{ after(grammarAccess.getPEnumAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnum__Group__1__Impl
	rule__PEnum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumAccess().getNameAssignment_1()); }
(rule__PEnum__NameAssignment_1)
{ after(grammarAccess.getPEnumAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnum__Group__2__Impl
	rule__PEnum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnum__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getPEnumAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnum__Group__3__Impl
	rule__PEnum__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnum__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumAccess().getElementsAssignment_3()); }
(rule__PEnum__ElementsAssignment_3)*
{ after(grammarAccess.getPEnumAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PEnum__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PEnum__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PEnum__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getPEnumAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__GrammarNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGrammarNameGrammarNameParserRuleCall_0_0()); }
	ruleGrammarName{ after(grammarAccess.getModelAccess().getGrammarNameGrammarNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PackageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackagePackageDeclarationParserRuleCall_1_0()); }
	rulePackageDeclaration{ after(grammarAccess.getModelAccess().getPackagePackageDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__RootClassAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRootClassRootClassParserRuleCall_2_0()); }
	ruleRootClass{ after(grammarAccess.getModelAccess().getRootClassRootClassParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DateTimeFormatAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDateTimeFormatDateTimeFormatParserRuleCall_3_0()); }
	ruleDateTimeFormat{ after(grammarAccess.getModelAccess().getDateTimeFormatDateTimeFormatParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__MessagesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMessagesMessageParserRuleCall_4_0()); }
	ruleMessage{ after(grammarAccess.getModelAccess().getMessagesMessageParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SubTypesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubTypesSubTypeParserRuleCall_5_0()); }
	ruleSubType{ after(grammarAccess.getModelAccess().getSubTypesSubTypeParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PenumsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPenumsPEnumParserRuleCall_6_0()); }
	rulePEnum{ after(grammarAccess.getModelAccess().getPenumsPEnumParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarName__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarNameAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getGrammarNameAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootClass__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootClassAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRootClassAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTimeFormat__DateTimeFormatAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeFormatAccess().getDateTimeFormatSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getDateTimeFormatAccess().getDateTimeFormatSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Message__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Message__AttributesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getAttributesAbstractAttributeParserRuleCall_3_0()); }
	ruleAbstractAttribute{ after(grammarAccess.getMessageAccess().getAttributesAbstractAttributeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Message__EnumsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getEnumsPEnumRefParserRuleCall_4_0()); }
	rulePEnumRef{ after(grammarAccess.getMessageAccess().getEnumsPEnumRefParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ListOfAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getListOfListOfParserRuleCall_2_0()); }
	ruleListOf{ after(grammarAccess.getAttributeAccess().getListOfListOfParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttributeTypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttributeTypeAttributeTypeEnumRuleCall_3_0()); }
	ruleAttributeType{ after(grammarAccess.getAttributeAccess().getAttributeTypeAttributeTypeEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__OptionalAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getOptionalOptionalParserRuleCall_4_0()); }
	ruleOptional{ after(grammarAccess.getAttributeAccess().getOptionalOptionalParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListOf__ListOfAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListOfAccess().getListOfListKeyword_0_0()); }
(
{ before(grammarAccess.getListOfAccess().getListOfListKeyword_0_0()); }

	'list' 

{ after(grammarAccess.getListOfAccess().getListOfListKeyword_0_0()); }
)

{ after(grammarAccess.getListOfAccess().getListOfListKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__OptionalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getOptionalLeftParenthesisKeyword_0_0()); }
(
{ before(grammarAccess.getOptionalAccess().getOptionalLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getOptionalAccess().getOptionalLeftParenthesisKeyword_0_0()); }
)

{ after(grammarAccess.getOptionalAccess().getOptionalLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSubTypeRefAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__ListOfAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getListOfListOfParserRuleCall_2_0()); }
	ruleListOf{ after(grammarAccess.getSubTypeRefAccess().getListOfListOfParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__SubTypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getSubTypeSubTypeCrossReference_3_0()); }
(
{ before(grammarAccess.getSubTypeRefAccess().getSubTypeSubTypeIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getSubTypeRefAccess().getSubTypeSubTypeIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getSubTypeRefAccess().getSubTypeSubTypeCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeRef__OptionalAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeRefAccess().getOptionalOptionalParserRuleCall_4_0()); }
	ruleOptional{ after(grammarAccess.getSubTypeRefAccess().getOptionalOptionalParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPEnumRefAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__PenumAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getPenumPEnumCrossReference_3_0()); }
(
{ before(grammarAccess.getPEnumRefAccess().getPenumPEnumIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getPEnumRefAccess().getPenumPEnumIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getPEnumRefAccess().getPenumPEnumCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumRef__OptionalAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumRefAccess().getOptionalOptionalParserRuleCall_4_0()); }
	ruleOptional{ after(grammarAccess.getPEnumRefAccess().getOptionalOptionalParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSubTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__AttributesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getAttributesAbstractAttributeParserRuleCall_3_0()); }
	ruleAbstractAttribute{ after(grammarAccess.getSubTypeAccess().getAttributesAbstractAttributeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubType__EnumsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeAccess().getEnumsPEnumRefParserRuleCall_4_0()); }
	rulePEnumRef{ after(grammarAccess.getSubTypeAccess().getEnumsPEnumRefParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PEnum__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPEnumAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PEnum__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumAccess().getElementsPEnumElementParserRuleCall_3_0()); }
	rulePEnumElement{ after(grammarAccess.getPEnumAccess().getElementsPEnumElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PEnumElement__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPEnumElementAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getPEnumElementAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


