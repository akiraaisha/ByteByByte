/*
* generated by Xtext
*/
package com.viacron.utils.bbb.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.viacron.utils.bbb.services.ByteByByteGrammarAccess;

public class ByteByByteParser extends AbstractContentAssistParser {
	
	@Inject
	private ByteByByteGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.viacron.utils.bbb.ui.contentassist.antlr.internal.InternalByteByByteParser createParser() {
		com.viacron.utils.bbb.ui.contentassist.antlr.internal.InternalByteByByteParser result = new com.viacron.utils.bbb.ui.contentassist.antlr.internal.InternalByteByByteParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractAttributeAccess().getAlternatives(), "rule__AbstractAttribute__Alternatives");
					put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getGrammarNameAccess().getGroup(), "rule__GrammarName__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getRootClassAccess().getGroup(), "rule__RootClass__Group__0");
					put(grammarAccess.getDateTimeFormatAccess().getGroup(), "rule__DateTimeFormat__Group__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getListOfAccess().getGroup(), "rule__ListOf__Group__0");
					put(grammarAccess.getOptionalAccess().getGroup(), "rule__Optional__Group__0");
					put(grammarAccess.getSubTypeRefAccess().getGroup(), "rule__SubTypeRef__Group__0");
					put(grammarAccess.getPEnumRefAccess().getGroup(), "rule__PEnumRef__Group__0");
					put(grammarAccess.getSubTypeAccess().getGroup(), "rule__SubType__Group__0");
					put(grammarAccess.getPEnumAccess().getGroup(), "rule__PEnum__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getGrammarNameAssignment_0(), "rule__Model__GrammarNameAssignment_0");
					put(grammarAccess.getModelAccess().getPackageAssignment_1(), "rule__Model__PackageAssignment_1");
					put(grammarAccess.getModelAccess().getRootClassAssignment_2(), "rule__Model__RootClassAssignment_2");
					put(grammarAccess.getModelAccess().getDateTimeFormatAssignment_3(), "rule__Model__DateTimeFormatAssignment_3");
					put(grammarAccess.getModelAccess().getMessagesAssignment_4(), "rule__Model__MessagesAssignment_4");
					put(grammarAccess.getModelAccess().getSubTypesAssignment_5(), "rule__Model__SubTypesAssignment_5");
					put(grammarAccess.getModelAccess().getPenumsAssignment_6(), "rule__Model__PenumsAssignment_6");
					put(grammarAccess.getGrammarNameAccess().getNameAssignment_1(), "rule__GrammarName__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getRootClassAccess().getNameAssignment_1(), "rule__RootClass__NameAssignment_1");
					put(grammarAccess.getDateTimeFormatAccess().getDateTimeFormatAssignment_1(), "rule__DateTimeFormat__DateTimeFormatAssignment_1");
					put(grammarAccess.getMessageAccess().getNameAssignment_1(), "rule__Message__NameAssignment_1");
					put(grammarAccess.getMessageAccess().getAttributesAssignment_3(), "rule__Message__AttributesAssignment_3");
					put(grammarAccess.getMessageAccess().getEnumsAssignment_4(), "rule__Message__EnumsAssignment_4");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getListOfAssignment_2(), "rule__Attribute__ListOfAssignment_2");
					put(grammarAccess.getAttributeAccess().getAttributeTypeAssignment_3(), "rule__Attribute__AttributeTypeAssignment_3");
					put(grammarAccess.getAttributeAccess().getOptionalAssignment_4(), "rule__Attribute__OptionalAssignment_4");
					put(grammarAccess.getListOfAccess().getListOfAssignment_0(), "rule__ListOf__ListOfAssignment_0");
					put(grammarAccess.getOptionalAccess().getOptionalAssignment_0(), "rule__Optional__OptionalAssignment_0");
					put(grammarAccess.getSubTypeRefAccess().getNameAssignment_0(), "rule__SubTypeRef__NameAssignment_0");
					put(grammarAccess.getSubTypeRefAccess().getListOfAssignment_2(), "rule__SubTypeRef__ListOfAssignment_2");
					put(grammarAccess.getSubTypeRefAccess().getSubTypeAssignment_3(), "rule__SubTypeRef__SubTypeAssignment_3");
					put(grammarAccess.getSubTypeRefAccess().getOptionalAssignment_4(), "rule__SubTypeRef__OptionalAssignment_4");
					put(grammarAccess.getPEnumRefAccess().getNameAssignment_0(), "rule__PEnumRef__NameAssignment_0");
					put(grammarAccess.getPEnumRefAccess().getPenumAssignment_3(), "rule__PEnumRef__PenumAssignment_3");
					put(grammarAccess.getPEnumRefAccess().getOptionalAssignment_4(), "rule__PEnumRef__OptionalAssignment_4");
					put(grammarAccess.getSubTypeAccess().getNameAssignment_1(), "rule__SubType__NameAssignment_1");
					put(grammarAccess.getSubTypeAccess().getAttributesAssignment_3(), "rule__SubType__AttributesAssignment_3");
					put(grammarAccess.getSubTypeAccess().getEnumsAssignment_4(), "rule__SubType__EnumsAssignment_4");
					put(grammarAccess.getPEnumAccess().getNameAssignment_1(), "rule__PEnum__NameAssignment_1");
					put(grammarAccess.getPEnumAccess().getElementsAssignment_3(), "rule__PEnum__ElementsAssignment_3");
					put(grammarAccess.getPEnumElementAccess().getNameAssignment(), "rule__PEnumElement__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.viacron.utils.bbb.ui.contentassist.antlr.internal.InternalByteByByteParser typedParser = (com.viacron.utils.bbb.ui.contentassist.antlr.internal.InternalByteByByteParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ByteByByteGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ByteByByteGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
